#!/data/data/com.termux/files/usr/bin/bash

# Fix issue where sometimes some files are staged and some aren't which causes it to not sync
git reset HEAD

# git-sync
#
# synchronize tracking repositories
#
# 2012-20 by Simon Thum and contributors
# Licensed as: CC0
#
# This script intends to sync via git near-automatically
# in "tracking" repositories where a nice history is not
# crucial, but having one at all is.
#
# Unlike the myriad of scripts to do just that already available,
# it follows the KISS principle: It is small, requires nothing but
# git and bash, but does not even try to shield you from git.
#
# Mode sync (default)
#
# Sync will likely get from you from a dull normal git repo with trivial
# changes to an updated dull normal git repo equal to origin. No more,
# no less. The intent is to do everything that's needed to sync
# automatically, and resort to manual intervention as soon
# as something non-trivial occurs. It is designed to be safe
# in that it will likely refuse to do anything not known to
# be safe.
#
# Mode check
#
# Check only performs the basic checks to make sure the repository
# is in an orderly state to continue syncing, i.e. committing
# changes, pull etc. without losing any data. When check returns
# 0, sync can start immediately. This does not, however, indicate
# that syncing is at all likely to succeed.

# command used to auto-commit file modifications
DEFAULT_AUTOCOMMIT_CMD="git add -u ; git commit -m \"%message\";"

# command used to auto-commit all changes
ALL_AUTOCOMMIT_CMD="git add -A ; git commit -m \"%message\";"

# default commit message substituted into autocommit commands
DEFAULT_AUTOCOMMIT_MSG="modifications de $(uname -n) le $(date)"


# AUTOCOMMIT_CMD="echo \"Veuillez valider ou stasher les modifications en attente\"; exit 1;"
# TODO mode for stash push & pop

print_usage() {
    cat << EOF
usage: $0 [-h] [-n] [-s] [MODE]

Synchroniser la branche actuelle avec une sauvegarde distante
MODE peut être soit "sync" (par défaut) soit "check", pour vérifier que la branche est prête à être synchronisée

OPTIONS :
   -h      Afficher ce message
   -n      Valider les nouveaux fichiers même si branch.\$branch_name.syncNewFiles n'est pas défini
   -s      Synchroniser la branche même si branch.\$branch_name.sync n'est pas défini
EOF
}
sync_new_files_anyway="false"
sync_anyway="false"

while getopts "hns" opt ; do
    case $opt in
        h )
            print_usage
            exit 0
            ;;
        n )
            sync_new_files_anyway="true"
            ;;
        s )
            sync_anyway="true"
            ;;
    esac
done
shift $((OPTIND-1))

#
#    utility functions, some adapted from git bash completion
#

__log_msg()
{
    echo git-sync: $1
}

# echo the git dir
__gitdir()
{
        if [ "true" = "$(git rev-parse --is-inside-work-tree "$PWD" | head -1)" ]; then
                git rev-parse --git-dir "$PWD" 2>/dev/null
        fi
}

# echos repo state
git_repo_state ()
{
        local g="$(__gitdir)"
        if [ -n "$g" ]; then
                if [ -f "$g/rebase-merge/interactive" ]; then
                        echo "REBASE-i"
                elif [ -d "$g/rebase-merge" ]; then
                        echo "REBASE-m"
                else
                        if [ -d "$g/rebase-apply" ]; then
                                echo "AM/REBASE"
                        elif [ -f "$g/MERGE_HEAD" ]; then
                                echo "FUSION"
                        elif [ -f "$g/CHERRY_PICK_HEAD" ]; then
                                echo "CHERRY-PICKING"
                        elif [ -f "$g/BISECT_LOG" ]; then
                                echo "BISECTING"
                        fi
                fi
                if [ "true" = "$(git rev-parse --is-inside-git-dir 2>/dev/null)" ]; then
                        if [ "true" = "$(git rev-parse --is-bare-repository 2>/dev/null)" ]; then
                                echo "|BARE"
                        else
                                echo "|GIT_DIR"
                        fi
                elif [ "true" = "$(git rev-parse --is-inside-work-tree 2>/dev/null)" ]; then
                        git diff --no-ext-diff --quiet --exit-code || echo "|SALE"
#                        if [ -n "${GIT_PS1_SHOWSTASHSTATE-}" ]; then
#                                git rev-parse --verify refs/stash >/dev/null 2>&1 && s="$"
#                        fi
#
#                        if [ -n "${GIT_PS1_SHOWUNTRACKEDFILES-}" ]; then
#                           if [ -n "$(git ls-files --others --exclude-standard)" ]; then
#                              u="%"
#                           fi
#                        fi
#
#                        if [ -n "${GIT_PS1_SHOWUPSTREAM-}" ]; then
#                                __git_ps1_show_upstream
#                        fi
                fi
        else
            echo "PAS DE GIT"
        fi
}

# check if we only have untouched, modified or (if configured) new files
check_initial_file_state()
{
    local syncNew="$(git config --get --bool branch.$branch_name.syncNewFiles)"
    if [[ "true" == "$syncNew" || "true" == "$sync_new_files_anyway" ]]; then
        # allow for new files
        if [ ! -z "$(git status --porcelain | grep -E '^[^ \?][^M\?] *')" ]; then
            echo "NonNouveauOuModifié"
        fi
    else
        # also bail on new files
        if [ ! -z "$(git status --porcelain | grep -E '^[^ ][^M] *')" ]; then
            echo "NonSeulementModifié"
        fi
    fi
}

# look for local changes
# used to decide if autocommit should be invoked
local_changes()
{
    if [ ! -z "$(git status --porcelain | grep -E '^(\?\?|[MARC] |[ MARC][MD])*')" ]; then
        echo "ModificationsLocales"
    fi
}

# determine sync state of repository, i.e. how the remote relates to our HEAD
sync_state()
{
    local count="$(git rev-list --count --left-right $remote_name/$branch_name...HEAD)"

    case "$count" in
        "") # no upstream
            echo "pas de flux amont"
            false
            ;;
        "0        0")
            echo "égal"
            true
            ;;
        "0        "*)
            echo "en avance"
            true
            ;;
        *"        0")
            echo "en retard"
            true
            ;;
        *)
            echo "divergé"
            true
            ;;
    esac
}

# exit, issue warning if not in sync
exit_assuming_sync() {
    if [ "equal" == "$(sync_state)" ] ; then
        __log_msg "Synchronisé, tout va bien."
        exit 0;
    else
        __log_msg "Échec de la synchronisation ! Vous devriez vérifier votre dépôt attentivement !"
        __log_msg "(Peut-être un problème réseau temporaire ? Veuillez réessayer dans ce cas.)"
        exit 3
    fi
}

#
#        Here git-sync actually starts
#

# first some sanity checks
rstate="$(git_repo_state)"
if [[ -z "$rstate" || "|SALE" = "$rstate" ]]; then
    __log_msg "Préparation. Dépôt dans $(__gitdir)"
elif [[ "PAS DE GIT" = "$rstate" ]] ; then
    __log_msg "Aucun dépôt git détecté. Sortie."
    exit 128 # matches git's error code
else
    __log_msg "État du dépôt git considéré comme non sécurisé pour la synchronisation : $(git_repo_state)"
    exit 2
fi

# determine the current branch (thanks to stackoverflow)
branch_name=$(git symbolic-ref -q HEAD)
branch_name=${branch_name##refs/heads/}

if [ -z "$branch_name" ] ; then
    __log_msg "La synchronisation n'est possible que sur une branche."
    git status
    exit 2
fi

# while at it, determine the remote to operate on
remote_name=$(git config --get branch.$branch_name.pushRemote)
if [ -z "$remote_name" ] ; then
    remote_name=$(git config --get remote.pushDefault)
fi
if [ -z "$remote_name" ] ; then
    remote_name=$(git config --get branch.$branch_name.remote)
fi

if [ -z "$remote_name" ] ; then
    __log_msg "la branche actuelle n'a pas de distant configuré."
    echo
    __log_msg "Veuillez utiliser"
    echo
    __log_msg "  git branch --set-upstream-to=[remote_name]/$branch_name"
    echo
    __log_msg "en remplaçant [remote_name] par le nom de votre distant, c'est-à-dire - origin"
    __log_msg "pour définir la branche de suivi distante pour que git-sync fonctionne"
    exit 2
fi

# check if current branch is configured for sync
if [[ "true" != "$(git config --get --bool branch.$branch_name.sync)" && "true" != "$sync_anyway" ]] ; then
    echo
    __log_msg "Veuillez utiliser"
    echo
    __log_msg "  git config --bool branch.$branch_name.sync true"
    echo
    __log_msg "pour inscrire la branche $branch_name pour la synchronisation."
    __log_msg "La branche $branch_name doit avoir une branche distante du même nom"
    __log_msg "pour que git-sync fonctionne."
    echo
    __log_msg "(Si vous ne savez pas ce que cela signifie, vous devriez changer cela"
    __log_msg "avant de vous fier à ce script. Vous avez été averti.)"
    echo
    exit 1
fi

# determine mode
if [[ -z "$1" || "$1" == "sync" ]]; then
    mode="sync"
elif [[ "check" == "$1" ]]; then
    mode="check"
else
    __log_msg "Mode $1 non reconnu"
    exit 100
fi

__log_msg "Mode $mode"

__log_msg "Utilisation de $remote_name/$branch_name"

# check for intentionally unhandled file states
if [ ! -z "$(check_initial_file_state)" ] ; then
    __log_msg "Il y a des fichiers modifiés que vous devriez probablement gérer manuellement."
    git status
    exit 1
fi

# if in check mode, this is all we need to know
if [ $mode == "check" ] ; then
    __log_msg "vérification OK; la synchronisation peut commencer."
    exit 0
fi

# check if we have to commit local changes, if yes, do so
if [ ! -z "$(local_changes)" ]; then
    autocommit_cmd=""
    config_autocommit_cmd="$(git config --get branch.$branch_name.autocommitscript)"

    # discern the three ways to auto-commit
    if [ ! -z "$config_autocommit_cmd" ]; then
        autocommit_cmd="$config_autocommit_cmd"
    elif [[ "true" == "$(git config --get --bool branch.$branch_name.syncNewFiles)" || "true" == "$sync_new_files_anyway" ]]; then
        autocommit_cmd=${ALL_AUTOCOMMIT_CMD}
    else
        autocommit_cmd=${DEFAULT_AUTOCOMMIT_CMD}
    fi

    commit_msg="$(git config --get branch.$branch_name.syncCommitMsg)"
    if [ "" == "$commit_msg" ]; then
      commit_msg=${DEFAULT_AUTOCOMMIT_MSG}
    fi
    autocommit_cmd=$(echo "$autocommit_cmd" | sed "s/%message/$commit_msg/")

    __log_msg "Validation des modifications locales en utilisant ${autocommit_cmd}"
    eval $autocommit_cmd

    # after autocommit, we should be clean
    rstate="$(git_repo_state)"
    if [[ ! -z "$rstate" ]]; then
        __log_msg "L'auto-commit a laissé des modifications non validées. Veuillez les ajouter ou les supprimer comme souhaité et réessayer."
        exit 1
    fi
fi

# fetch remote to get to the current sync state
# TODO make fetching/pushing optional
__log_msg "Récupération depuis $remote_name/$branch_name"
git fetch $remote_name $branch_name
if [ $? != 0 ] ; then
    __log_msg "git fetch $remote_name a retourné une valeur non nulle. Probablement un problème de réseau ; sortie."
    exit 3
fi

case "$(sync_state)" in
"pas de flux amont")
        __log_msg "État étrange, vous êtes seul. Bonne chance."
        exit 2
        ;;
"égal")
        exit_assuming_sync
        ;;
"en avance")
        __log_msg "Envoi des modifications..."
        git push $remote_name $branch_name:$branch_name
        if [ $? == 0 ]; then
            exit_assuming_sync
        else
            __log_msg "git push a retourné une valeur non nulle. Probablement une défaillance de connexion."
            exit 3
        fi
        ;;
"en retard")
        __log_msg "Nous sommes en retard, avancement rapide..."
        git merge --ff --ff-only $remote_name/$branch_name
        if [ $? == 0 ]; then
            exit_assuming_sync
        else
            __log_msg "git merge --ff --ff-only a retourné une valeur non nulle ($?). Sortie."
            exit 2
        fi
        ;;
"divergé")
        __log_msg "Nous avons divergé. Tentative de rebase..."
        git rebase $remote_name/$branch_name
        if [[ $? == 0 && -z "$(git_repo_state)" && "ahead" == "$(sync_state)" ]] ; then
            __log_msg "Le rebase s'est bien passé, envoi..."
            git push $remote_name $branch_name:$branch_name
            exit_assuming_sync
        else
            __log_msg "Le rebase a échoué, il y a probablement des modifications conflictuelles. Résolvez-les et terminez le rebase avant de répéter git-sync."
            exit 1
        fi
        # TODO: save master, if rebasing fails, make a branch of old master
        ;;
esac