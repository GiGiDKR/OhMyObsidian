#!/data/data/com.termux/files/usr/bin/bash
source /storage/emulated/0/Documents/Repository/OhMyObsidian/bashrc

### Désactiver la protection des dépôts non fiables

existing_dirs=$(git config --global --get-all safe.directory)

if [[ ! $existing_dirs == *"*"* ]]; then
    git config --global --add safe.directory "*"
fi

### Mettre à jour le dépôt de scripts

cd "$SCRIPTS_REPO_PATH"
git fetch > /dev/null
git_status=$(git status)

if [[ "$git_status" == *"Your branch is behind"* ]]; then
  if [[ "$git_status" == *"Changes not staged for commit"* || "$git_status" == *"Changes to be committed"* ]]; then
    echo -e "${RED}Il y a des modifications locales dans le dépôt de scripts qui bloqueraient un git pull. Sachez simplement que vous manquez des mises à jour. Poursuite du script...${RESET}"
  else
    if git pull > /dev/null 2>&1; then
      echo -e "${GREEN}Le dépôt de scripts a été mis à jour !${RESET}"
    else
      echo -e "${RED}Échec de la mise à jour du dépôt de scripts.${RESET}"
      exit 1
    fi

    # Vérifier si le fichier 'setup' dans le dépôt est différent de celui dans $HOME
    if ! diff "${SCRIPTS_REPO_PATH}/setup" "$HOME/OhMyObsidian/setup" > /dev/null; then
        cmd="cp \"${SCRIPTS_REPO_PATH}/setup\" \"${HOME}/OhMyObsidian/\""
        echo -e "$cmd" | termux-clipboard-set
        echo -e "${RED}Le fichier 'setup' a été mis à jour.\nExécutez la commande suivante pour le mettre à jour (elle est déjà dans votre presse-papiers) :\n${YELLOW}${cmd}${RESET}"
        echo -e "${RED}Arrêt du script.${RESET}"
        exit 1
    fi
  fi
fi

### S'assurer que Termux a les permissions de fichiers

if touch "$STORAGE_PATH"/.termux_permission_check; then
  rm "$STORAGE_PATH"/.termux_permission_check
else
  echo -e "${RED}Termux n'a pas les permissions de fichiers.${RESET}"
  echo -e "${BLUE}Exécutez 'termux-setup-storage' ou accordez la permission depuis le menu des permissions de Termux sur Android.${RESET}"
fi

### Activer allow-external-apps

if grep -q '^# allow-external-apps = true' $HOME/.termux/termux.properties; then
  sed -i 's/^# allow-external-apps = true/allow-external-apps = true/' $HOME/.termux/termux.properties
  termux-reload-settings
fi

### Installer les paquets -- tentative

# package_installed() {
#   dpkg -l | grep -q "$1"
# }

# for pkg in git termux-api openssh; do
#   if ! package_installed "$pkg"; then
#     echo "Installation de $pkg..."
#     apt-get install -y "$pkg"
#   fi
# done

### Créer des clés SSH

if [ ! -f ~/.ssh/id_rsa ]; then
  echo -e "${BLUE}Création d'une clé SSH...${RESET}"
  ssh-keygen -t rsa -N "" -f ~/.ssh/id_rsa > /dev/null

  if cat ~/.ssh/id_rsa.pub | termux-clipboard-set; then
    echo -e "${BLUE}La clé publique SSH a été copiée dans votre presse-papiers.${RESET}"
    echo -e "${BLUE}Veuillez la coller dans les paramètres d'authentification des clés SSH de votre hébergeur Git.${RESET}"
  else
    echo -e "$YELLOW"
    cat ~/.ssh/id_rsa.pub
    echo -e "\n$RESET"
    echo -e "${BLUE}Copiez la clé ci-dessus (en ${YELLOW}jaune${BLUE}) et collez-la dans les paramètres d'authentification des clés SSH de votre hébergeur Git.${RESET}"
  fi
else
  echo -e "$YELLOW"
  cat ~/.ssh/id_rsa.pub
  echo -e "\n${BLUE}Voici votre clé SSH (ci-dessus en ${YELLOW}jaune${BLUE}) au cas où vous voudriez la copier.${RESET}"
fi

### Copier et chmod les scripts vers $HOME

DEST_DIR="$HOME/OhMyObsidian"

for file in "$SCRIPTS_REPO_PATH"/*; do
  filename=$(basename -- "$file")
  cp "$file" "$DEST_DIR/"
  chmod +x "$DEST_DIR/$filename"
done

### Ajouter la source à bashrc

BASHRC_FILE="/data/data/com.termux/files/usr/etc/bash.bashrc"
ZSHRC_FILE="$HOME/.zshrc"

declare -a LINES_TO_ADD=(
  "source $SCRIPTS_REPO_PATH/bashrc # obsidian-sync-source-tag"
)

modify_or_add_line_with_tag() {
  local line=$1
  local file=$2
  local tag=$(echo "$line" | awk -F'#' '{print $2}')

  sed -i "/$tag/d" "$file"
  echo >> "$file"  # Ajoute un retour à la ligne
  echo "$line" >> "$file"
}

for line in "${LINES_TO_ADD[@]}"; do
  modify_or_add_line_with_tag "$line" "$BASHRC_FILE"
done

# Si zsh est installé, ajouter à .zshrc

if command -v zsh; then
  for line in "${LINES_TO_ADD[@]}"; do
    modify_or_add_line_with_tag "$line" "$ZSHRC_FILE"
  done
fi

### S'assurer que user.name et user.email sont remplis

git_name=$(git config --global user.name)
git_email=$(git config --global user.email)

if [ -z "$git_name" ]; then
  read -p "Entrez votre git user.name : " git_name
  git config --global user.name "$git_name"
fi

if [ -z "$git_email" ]; then
  read -p "Entrez votre git user.email : " git_email
  git config --global user.email "$git_email"
fi

### Configuration Git

git config --global core.editor nano
git config --global merge.conflictstyle diff3

###

touch $NOTIFICATION_PATH

cd $OBSIDIAN_DIR_PATH

echo -e "\n${GREEN}Configuration terminée${RESET}\n"